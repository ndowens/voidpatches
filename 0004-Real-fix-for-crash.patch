From 22de0ef43cb880afb794b7166cac1eefbef54cca Mon Sep 17 00:00:00 2001
From: Baruch Even <baruch@ev-en.org>
Date: Wed, 25 Nov 2015 23:11:22 +0200
Subject: [PATCH 4/4] Real fix for crash

Now we can work on a block device properly, closes #9 properly.
---
 src/disku.c | 126 +++++++++++++++++++++++++++-------------------------
 1 file changed, 66 insertions(+), 60 deletions(-)

diff --git src/disku.c src/disku.c
index b918147..d50cebf 100644
--- src/disku.c
+++ src/disku.c
@@ -15,7 +15,6 @@
  *
  */
 
-
 #include <errno.h>
 #include <stdio.h>
 #include <string.h>
@@ -36,90 +35,98 @@
 
 #include <unistd.h>
 
-
-/*
- * get disk geometry. The medium is opened for reading,
- * descriptor in d_fd.
- */
-
-struct disk_geom *disk_geometry(disk_desc *d)
+static void geometry_from_num_sectors(struct disk_geom *g, uint64_t nsects)
 {
-	static struct disk_geom	g;
-	uint64_t			nsects;
+	const uint64_t lba = nsects - 1;
 
-	memset(&g, 0, sizeof(g));
+	g->d_h = (lba / 63) % 255;
+	g->d_s = lba % 63 + 1;
+	g->d_c = lba / (255 * 63);
+	g->d_nsecs = nsects;
+}
 
 #if defined(__linux__)
-	struct hd_geometry	hg;
-#endif
-#if defined(__FreeBSD__)
-	struct disklabel	dl;
-#endif
-
-	struct stat st;
-	int ret;
-	uint64_t lba;
-	ret = stat(d->d_dev, &st);
-	if (ret == 0)
-	{
-		if (S_ISREG(st.st_mode))
-		{
-			nsects = st.st_size / 512;
-			if (nsects == 0)
-				pr(FATAL, EM_FATALERROR, "Not a block device image file");
-			lba = nsects - 1;
-			g.d_h = (lba / 63) % 255;
-			g.d_s = lba % 63 + 1;
-			g.d_c = lba / (255 * 63);
-			g.d_nsecs = nsects;
-			return (&g);
-		}
+static void os_disk_geometry(disk_desc *d, struct disk_geom *g)
+{
+	struct hd_geometry hg;
+	uint64_t nsects;
+
+	if (ioctl(d->d_fd, HDIO_GETGEO, &hg) == -1)
+		pr(FATAL, EM_IOCTLFAILED, "HDIO_GETGEO", strerror(errno));
+	else {
+		g->d_h = hg.heads;
+		g->d_s = hg.sectors;
+		g->d_c = hg.cylinders;
 	}
-
-#if defined(__linux__)
-	if (ioctl(d->d_fd,HDIO_GETGEO,&hg) == -1)
-		pr(FATAL,EM_IOCTLFAILED,"HDIO_GETGEO",strerror(errno));
 #ifdef BLKGETSIZE
-	if (ioctl(d->d_fd,BLKGETSIZE,&nsects) == -1)
-		pr(FATAL,EM_IOCTLFAILED,"BLKGETSIZE",strerror(errno));
-	g.d_nsecs = nsects;
-	g.d_c = nsects / (hg.heads * hg.sectors);
-#else
-	g.d_c = hg.cylinders;
-#endif
-	g.d_h = hg.heads;
-	g.d_s = hg.sectors;
-
+	if (ioctl(d->d_fd, BLKGETSIZE, &nsects) == -1)
+		pr(FATAL, EM_IOCTLFAILED, "BLKGETSIZE", strerror(errno));
+	else {
+		if (hg.heads && hg.sectors)
+			g->d_c = nsects / (hg.heads * hg.sectors);
+		else
+			geometry_from_num_sectors(g, nsects);
+	}
 #endif
-
-#if defined(__FreeBSD__)
-	struct disklabel	loclab;
-	u_int    u;
-	off_t	 o; /* total disk size */
+}
+#elif defined(__FreeBSD__)
+static void os_disk_geometry(disk_desc *d, struct disk_geom *g)
+{
+	struct disklabel dl;
+	struct disklabel loclab;
+	u_int u;
+	off_t o; /* total disk size */
 
 	if (ioctl(d->d_fd, DIOCGFWSECTORS, &u) == 0)
 		g.d_s = u;
 	else
 		pr(FATAL, EM_IOCTLFAILED, "DIOCGFWSECTORS", strerror(errno));
-		// loclab.d_nsectors = 63;
+	// loclab.d_nsectors = 63;
 	if (ioctl(d->d_fd, DIOCGFWHEADS, &u) == 0)
 		g.d_h = u;
 	else
 		pr(FATAL, EM_IOCTLFAILED, "DIOCGFWHEADS", strerror(errno));
 	if (ioctl(d->d_fd, DIOCGSECTORSIZE, &u) == 0)
 		if (u != 512)
-		    pr(FATAL, "sector size not a multiple of 512");
+			pr(FATAL, "sector size not a multiple of 512");
 	if (ioctl(d->d_fd, DIOCGMEDIASIZE, &o))
 		pr(FATAL, EM_IOCTLFAILED, "DIOCGMEDIASIZE", strerror(errno));
 
 	g.d_nsecs = o / u;
 	g.d_c = g.d_nsecs / g.d_h / g.d_s;
+}
+#else
+#error Only Linux and FreeBSD supported
 #endif
 
+/*
+ * get disk geometry. The medium is opened for reading,
+ * descriptor in d_fd.
+ */
+
+struct disk_geom *disk_geometry(disk_desc *d)
+{
+	static struct disk_geom g;
+	uint64_t nsects;
+	struct stat st;
+	int ret;
+
+	memset(&g, 0, sizeof(g));
+
+	ret = stat(d->d_dev, &st);
+	if (ret == 0 && S_ISREG(st.st_mode)) {
+		// We have something, we'll use it for a first fill of the data
+		nsects = st.st_size / 512;
+		if (nsects == 0)
+			pr(FATAL, EM_FATALERROR, "Not a block device image file");
+		geometry_from_num_sectors(&g, nsects);
+		return (&g);
+	}
+
+	os_disk_geometry(d, &g);
 	return (&g);
 }
 
-
 /*
  * tell the OS to reread a changed partition table. Do
  * nothing if there is no such possibility.
@@ -128,9 +135,8 @@ struct disk_geom *disk_geometry(disk_desc *d)
 int reread_partition_table(int fd)
 {
 #if defined(__linux__) && defined(BLKRRPART)
-	if (ioctl(fd,BLKRRPART) == -1)
-	{
-		pr(ERROR,"rereading partition table: %s",strerror(errno));
+	if (ioctl(fd, BLKRRPART) == -1) {
+		pr(ERROR, "rereading partition table: %s", strerror(errno));
 		return (0);
 	}
 #endif
-- 
2.20.1

